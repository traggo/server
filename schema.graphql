enum Role {
    ADMIN
    USER
}
directive @hasRole(role: Role!) on FIELD_DEFINITION

schema {
    query: RootQuery
    mutation: RootMutation
}

type RootMutation {
    createTag(key: String!, color: String!, type: TagDefinitionType!): TagDefinition @hasRole(role: USER)
    removeTag(key: String!): TagDefinition @hasRole(role: USER)

    createUser(name: String!, pass: String!, admin: Boolean!): User @hasRole(role: ADMIN)
    removeUser(id: Int!): User @hasRole(role: ADMIN)
    updateUser(id: Int!, name: String!, pass: String, admin: Boolean!): User @hasRole(role: ADMIN)

    login(username: String!, pass: String!, deviceName: String! expiresAt: Time!, cookie: Boolean!): Login

    createDevice(name: String! expiresAt: Time!): Login @hasRole(role: USER)
    updateDevice(id: Int!, name: String!, expiresAt: Time!): Device
    removeDevice(id: Int!): Device @hasRole(role: USER)
    removeCurrentDevice: Device! @hasRole(role: USER)

    createTimeSpan(start: Time!, end: Time, tags: [InputTimeSpanTag!]): TimeSpan @hasRole(role: USER)
    updateTimeSpan(id: Int!, start: Time!, end: Time, tags: [InputTimeSpanTag!]): TimeSpan @hasRole(role: USER)
    removeTimeSpan(id: Int!): TimeSpan @hasRole(role: USER)
    copyTimeSpan(id: Int!, start: Time!, end: Time): TimeSpan @hasRole(role: USER)
    stopTimeSpan(id: Int!, end: Time!): TimeSpan @hasRole(role: USER)

    settingPut(namespace: String!, key: String!, value: String!): String! @hasRole(role: USER)
}

type RootQuery {
    suggestTag(query: String!): [TagDefinition!] @hasRole(role: USER)
    suggestTagValue(key: String!, query: String!): [String!] @hasRole(role: USER)
    tags: [TagDefinition!] @hasRole(role: USER)
    users: [User!] @hasRole(role: ADMIN)
    currentUser: User
    currentDevice: Device
    devices: [Device!] @hasRole(role: USER)
    timeSpans(fromInclusive: Time, toInclusive: Time, cursor: InputCursor): PagedTimeSpans! @hasRole(role: USER)
    timers: [TimeSpan!] @hasRole(role: USER)
    stats(ranges: [Range!], tags: [String!], excludeTags: [InputTimeSpanTag!], requireTags: [InputTimeSpanTag!]): [RangedStatisticsEntries!]
    version: Version!
    settings(namespace: String!): [Setting!] @hasRole(role: USER)
    settingGet(namespace: String!, key: String!): String! @hasRole(role: USER)
}

input InputCursor {
    offset: Int
    startId: Int
    pageSize: Int
}

type Cursor {
    hasMore: Boolean!
    offset: Int!
    startId: Int!
    pageSize: Int!
}

type Setting {
    key: String!
    value: String!
}

type Version {
    name: String!
    commit: String!
    buildDate: String!
}

type Login {
    token: String!
    user: User!
    device: Device!
}

type Device {
    id: Int!
    name: String!
    expiresAt: Time!
    createdAt: Time!
    activeAt: Time!
}

scalar Time

type TagDefinition {
    color: String!
    key: String!
    type: TagDefinitionType!
    user: User!
}

enum TagDefinitionType {
    novalue
    singlevalue
}

type User {
    admin: Boolean!
    id: Int!
    name: String!
}

type TimeSpan {
    id: Int!
    start: Time!
    end: Time
    tags: [TimeSpanTag!]
}

type PagedTimeSpans {
    timeSpans: [TimeSpan!]!
    cursor: Cursor!
}

type TimeSpanTag {
    key: String!
    stringValue: String
}

input InputTimeSpanTag {
    key: String!
    stringValue: String
}

input StatInput {
    key: String!
    mustHave: [InputTimeSpanTag!]
    mustNotHave: [InputTimeSpanTag!]
}

input Range {
    start: Time!
    end: Time!
}

type StatisticsEntry {
    key: String!
    stringValue: String
    timeSpendInSeconds: Int!
}

type RangedStatisticsEntries {
    start: Time!
    end: Time!
    entries: [StatisticsEntry!]
}